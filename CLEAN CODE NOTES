OBJECTS AND DATA STRUCTURE:
Data Abstraction
  - hiding implementation but exposes behavior
  - it exposes abstract interfaces that allow its users to manipulate the essence of the data, without having to know its implementation
 
Objects
  - hide their data behind abstractions and expose functions that operate on that data
  
Data Structure
  - expose their data and have no meaningful functions (e.g. DTO, Java Bean)
  
Procedural Programming
  - usually the approach when dealing with data structures
  - classes with just data are defined and their functional operations are processed with a separate class
  
Object-Oriented (Polymorphic)
  - the approach when dealing with Objects (which by nature abstracted its data and exposes behavior only)
  - behavior or methods can be defined on the parent class and child classes would implement it as their functional operation
  
Difference Between OOP(objects) & Procedural(data structure) Approach
  - Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. 
  - OO code, on the other hand, makes it easy to add new classes without changing existing functions
  - Procedural code makes it hard to add new data structures because all the functions must change. 
  - OO code makes it hard to add new functions because all the classes must change.
  
  "So, the things that are hard for OO are easy for procedures, and the things that are hard for procedures are easy for OO"
  
The Law of Demeter (Principle of least knowledge)
	- a module should not know about the innards of the objects it manipulates

A method f of a class C should only call the methods of these:
	- C
	- An object created by f
	- An object passed as an argument to f
	- An object held in an instance variable of C
	
	"In other words, talk to friends, not to strangers"

Train Wrecks
	- often called a train wreck because it look like a bunch of coupled train cars
	- Chains of calls like this are generally considered to be sloppy style and should be avoided
	
DTO (Data Transfer Object)
	- data structure with public variables that has no behaviors
	- usually used for database communication and parsing data from sockets
	- java bean is a special type of DTO that has getters and setter of private variables
	
	"In any given system we will sometimes want the flexibility to add new data types, and 
	so we prefer objects for that part of the system. Other times we will want the flexibility to add new behaviors, 
	and so in that part of the system we prefer data types and procedures."


ERROR HANDLING:
	- Error handling is important, but if it obscures logic, itâ€™s wrong.
Use Exceptions Rather Than Return Codes
	- Use exceptions (try-catch) instead of just catching it with if-else so it seaprates the concer of logic and error-handling
Use Unchecked Exceptions
	- Checked exceptions are usually a bad idea as they violates Open/Closed Principles; you must declare that exception in the 
	signature of each method between you and the catch.
Provide Context with Exceptions
	- Create informative error messages and pass them along with your exceptions. Mention the operation that failed and the type of failure. 
	If you are logging in your application, pass along enough information to be able to log the error in your catch.
Don't Return Null
	- Too many null checkers on the whole codebase, it is easy to have a bug where NullPointerException is thrown and might be a application show-stopper
Don't Pass Null
	- Some methods might not be coding defensivle therefore null checks is possibly not present on that method there a NullPointerException might get thrown.
	
BOUNDARIES:
Using Third-Party Code
	- there's a conflicting goal wherein vendors tries to make their libraries very capable of many things to attract many users and user's goal 
	is to consider using only what they specificaly need on third-party libraries.
	- most of the time we wanted to encapsulate this third-party libraries to our custom class so we can interface only what we need and hide 
	other unnecessary functions. Expose only those that meet the needs of the application.
